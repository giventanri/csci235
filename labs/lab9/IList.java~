/**
 * IList.java
 *
 * A first stab at a linked list (iterative version)
 *
 * @author Given Tanri
 * Wheaton College, CSCI 235, Spring 2020
 * Lab 9
 * 20200407
 */

public class IList {

    /**
     * The first INode in this list.
     */
    private INode head;

    /**
     * Constructor.
     * POSTCONDITION: This list is empty.
     */
    public IList() {
	head = null;
    }

    /**
     * Alternative to constructor: create a list for use by sorting methods.
     * To simplify the insertion methods used for sorting, this starts
     * out the list with an extra zero item on the front.
     * After fixing the insertions to work on an empty list,
     * change this method  to start with an empty list.
     */
    public static IList newSortList() {
	IList theList = new IList();
	return theList;
    }

    /**
     * Is this list empty?
     * @return Whether this list is empty.
     */
    public boolean isEmpty() {
	return head == null;
    }

    /**
     * Insert an item at the front of this list.
     * @param item The item to add.
     */
    public void insertAtFront(int item) {
	head = new INode(item, head);
    }

    /**
     * Delete the front item from this list.
     * PRECONDITION: This list is not empty.
     */
    public void deleteFront() {
	head = head.next();
    }

    /**
     * Delete and return the front item from this list.
     * @return The item that was deleted.
     * PRECONDITION: This list is not empty.
     */
    public int removeFront() {
	int temp = head.datum();
	head = head.next();
	return temp;
    }

    /**
     * Print the elements of this list to System.out.
     */
    public void printList() {
	System.out.print("[ ");
	INode place = head; // position within this list
	while (place != null) {
	    System.out.print(place.datum()+" ");
	    place = place.next();
	}
	System.out.println("]");
    }

    /**
     * How many items are in this list?
     * @return The number of items in this list.
     */
    public int length() {
	INode place = head;  // the node we are looking at
	int i = 0;           // the counter 
	while (place != null) {
	    // counter incremented for each node
	    i++;
	    place = place.next();
	}
	return i; 
    }
 
    /**
     * What is the sum of items in the list?
     * @return The sum of all items in this list.
     */
    public int sum() {
	throw new RuntimeException("method not written");
    }

    /**
     * Does the list contain an item?
     * @param item The value to look for.
     * @return Whether this list contains the item.
     */
    public boolean contains(int item) {
	throw new RuntimeException("method not written");
    }

    /**
     * Get the value of the item at a specified position.
     * @param position The position in the list.
     * @return The value at position in the list.
     * PRECONDITION: position >= 0 and position < length of this list
     */
    public int elementAt(int position) {
	/* This is not the most compact way to write this,
	 * but this form can be adapted to other uses.
	 */
	INode place = head;  // the node we are looking at
	int i = 0;           // the position of place
	while (place != null) {
	    if (i == position) { // is place the node we want?
		return place.datum();
	    }
	    // do something before going to the next node
	    place = place.next();
	    i++;
	}
	// ran off the end
	throw new RuntimeException("precondition violated");
    }

    /**
     * Insert a new item at after a specified position.
     * @param item The value to insert.
     * @param position The index after which the item will be inserted.
     * PRECONDITION: position >= 0 and position < length of this list
     */
    public void insertAfter(int item, int position) {
	throw new RuntimeException("method not written");
    }

    /**
     * Delete the item at a specified position.
     * @param position The position in the list.
     * PRECONDITION: position >= 0 and position < length of this list
     */
    public void deleteAt(int position) {
	INode place = head;    // where we are in the list
	int i = 0;             // count corresponding to place
	INode previous = null; // the node before place
                         // There is nothing before head, so null?
	while (place != null) {
	    if (i == position) {
		// place is the node to remove from the list;
		// so splice out place -- for which we need to know
	        // the node before it
		if (i == 0) head = place.next();
		else previous.setNext(place.next());
		return;
	    }
	    // move place forward
	    previous = place;
	    place = place.next();
	    i += 1;
	}
	// reached only if position >= length of list
	throw new RuntimeException("precondition violated");
    }

    /**
     * Delete the first occurrence of item in this list, if any.
     * @param item The item to delete
     */
    public void deleteFirstOccurrence(int item) {
	if (head.datum() == item) deleteFront();
	else {
	    INode place = head;
	    INode previous = null; // null before head

	    // at the first occurence of item,
	    // link the previous node to the node after place
	    while (place != null) {
		if (place.datum() == item) {
		    previous.setNext( place.next() );
		}
		previous = place;
		place = place.next();
	    }
	}
    }

    /**
     * Delete all occurrences of item in this list, if any.
     * @param item The item to delete
     */
    public void deleteAll(int item) {
	throw new RuntimeException("method not written");
    }

    /**
     * Make a new list that is the reverse of this one.
     * @return the reversed new list
     */
    public IList makeReverse() {
	throw new RuntimeException("method not written");
    }

    /**
     * Reverse this list (without making a new list).
     * (Ideally, do it without making any new nodes.)
     */
    public void reverse() {
	throw new RuntimeException("method not written");
    }


    /**
     * Insert a new item at the right place in an (assumed sorted) list.
     * @param item The item to insert in the right place.
     */
    public void insertSorted(int item) {

	// Condition 1: empty list
	if (head == null) insertAtFront(item);

	// Condition 2: item < head.datum()
	else if (item < head.datum() ) {
	    INode temp = head;
	    insertAtFront(item);
	    head.setNext(temp);
	    
	} else {
	    INode place = head;    // where we are in the list
	    while (place != null) {
		if (place.next() == null || item < place.next().datum() ) {
		    // if the item is smaller then the next datum,
		    // then a new node containing the item is inserted
		    INode insertedNode = new INode(item, place.next() );
		    place.setNext(insertedNode);
		    return;
		}
		// move place forward
		place = place.next();
	    }
	}
    }

    /**
     * Insert an item at the back of the list.
     * @param item The item to to add
     */
    public void insertAtBack(int item) {
	INode place = head;
	while (place != null) {
	    if (place.next() == null) {
		INode insertedNode = new INode(item, null);
		place.setNext(insertedNode);
		return;
	    }
	    place = place.next();
	}
    }

    /**
     * Remove and return the smallest element of the list.
     * First find the smallest, then delete it, then return it.
     * @return The (now removed) smallest element in the list.
     * PRECONDITION: the list is not empty.
     */
    public int removeSmallest() {
        int smallest = findSmallest();
        deleteFirstOccurrence(smallest);
        return smallest;
    }

    /**
     * Return the value of the smallest element of the list.
     * @return smallest The smallest element in the list.
     * PRECONDITION: the list is not empty.
     */
    private int findSmallest() {
	int smallest = elementAt(0); 
	for (int i = 0; i < length(); i++) {	    
	    if (elementAt(i) < smallest) {
		smallest = elementAt(i);
	    }
	}
	return smallest;
    }

    public static void main(String[] args) {
	// whatever we need to test the class
	IList x = new IList();
	System.out.println("isEmpty()? "+x.isEmpty());
	System.out.print("Initial: ");
	x.printList();
	
	System.out.println("insertAtFront(4)");
	x.insertAtFront(4);  // [ 4 ]
	x.printList();
	
	System.out.println("insertAtFront(12)");
	x.insertAtFront(12);  // [ 12 4  ]
	System.out.println("insertAtFront(15)");
	x.insertAtFront(15);  // [ 15 12 4  ]
	x.printList();

	// test length()
	System.out.println("x.length()");
	System.out.println(x.length() );

	// test ListInsertion.sort();
	System.out.println("ListInsertion.sort(x)");
	x = ListInsertion.sort(x); // [ 4 12 15 ]
	x.printList();
	
	System.out.println("deleteAt(2)");
	x.deleteAt(2);  // [ 4 12 ]
	x.printList();

	// test deleteAt(0)
	System.out.println("deleteAt(0)");
	x.deleteAt(0);  // [ 12 ]
	x.printList();

	// test length()
	System.out.println("x.length()");
	System.out.println(x.length() );
	
	System.out.println("isEmpty()? "+x.isEmpty());
	System.out.println("length() "+x.length());
	System.out.println("deleteFront()");
	x.deleteFront();
	

	// test removeSmallest()
	x.insertAtFront(12);
	x.insertAtFront(4);
	x.insertAtFront(6);
	System.out.println("--Before:");
	x.printList();
	System.out.println("x.removeSmallest()");
	x.removeSmallest();
	System.out.println("--After:");
	x.printList();

	// test insertAtBack()
	System.out.println("--Before:");
	x.printList();
	System.out.println("x.insertAtBack(5)");
	x.insertAtBack(5); 
	System.out.println("x.insertAtBack(2)");
	x.insertAtBack(2); 
	System.out.println("--After:");
	x.printList(); 
	
    }
}
